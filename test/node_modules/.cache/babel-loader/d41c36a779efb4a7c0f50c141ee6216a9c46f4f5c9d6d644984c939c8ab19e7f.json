{"ast":null,"code":"import * as types from '../actions/ActionTypes';\nconst initialTasks = [{\n  taskName: \"task1\",\n  isCompleted: false\n}, {\n  taskName: \"task2\",\n  isCompleted: true\n}, {\n  taskName: \"task3\",\n  isCompleted: false\n}];\nexport default function todos() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialTasks;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case types.ADD_TASK:\n      return [...state, {\n        taskName: action.taskName,\n        isCompleted: false\n      }];\n    case types.DELETE_TASK:\n      return [...state.slice(0, action.idx), ...state.slice(action.idx + 1)];\n    case types.TOGGLE_TASK:\n      let newState = [...state];\n      newState[action.idx].isCompleted = !newState[action.idx].isCompleted;\n      return newState;\n    case types.EDIT_TASK:\n      let new_State = [...state];\n      new_State[action.idx] = {\n        taskName: action.taskName,\n        ...new_State[action.idx]\n      };\n      return new_State;\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["types","initialTasks","taskName","isCompleted","todos","state","action","type","ADD_TASK","DELETE_TASK","slice","idx","TOGGLE_TASK","newState","EDIT_TASK","new_State"],"sources":["C:/react_test/test/src/reducer/todos.js"],"sourcesContent":["import * as types from '../actions/ActionTypes';\n\nconst initialTasks = [\n  { taskName: \"task1\", isCompleted: false },\n  { taskName: \"task2\", isCompleted: true },\n  { taskName: \"task3\", isCompleted: false },\n];\n\nexport default function todos(state = initialTasks, action) {\n  switch (action.type) {\n    case types.ADD_TASK:\n      return [\n        ...state,\n        {\n          taskName: action.taskName,\n          isCompleted: false,\n        },\n      ];\n    case types.DELETE_TASK:\n      return [...state.slice(0, action.idx), ...state.slice(action.idx + 1)];\n    case types.TOGGLE_TASK:\n      let newState = [...state];\n      newState[action.idx].isCompleted = !newState[action.idx].isCompleted;\n      return newState;\n    case types.EDIT_TASK:\n      let new_State = [...state];\n      new_State[action.idx] = {\n        taskName: action.taskName,\n        ...new_State[action.idx]\n      };\n      return new_State;\n    default:\n      return state;\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,wBAAwB;AAE/C,MAAMC,YAAY,GAAG,CACnB;EAAEC,QAAQ,EAAE,OAAO;EAAEC,WAAW,EAAE;AAAM,CAAC,EACzC;EAAED,QAAQ,EAAE,OAAO;EAAEC,WAAW,EAAE;AAAK,CAAC,EACxC;EAAED,QAAQ,EAAE,OAAO;EAAEC,WAAW,EAAE;AAAM,CAAC,CAC1C;AAED,eAAe,SAASC,KAAK,GAA+B;EAAA,IAA9BC,KAAK,uEAAGJ,YAAY;EAAA,IAAEK,MAAM;EACxD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKP,KAAK,CAACQ,QAAQ;MACjB,OAAO,CACL,GAAGH,KAAK,EACR;QACEH,QAAQ,EAAEI,MAAM,CAACJ,QAAQ;QACzBC,WAAW,EAAE;MACf,CAAC,CACF;IACH,KAAKH,KAAK,CAACS,WAAW;MACpB,OAAO,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAAC,EAAEJ,MAAM,CAACK,GAAG,CAAC,EAAE,GAAGN,KAAK,CAACK,KAAK,CAACJ,MAAM,CAACK,GAAG,GAAG,CAAC,CAAC,CAAC;IACxE,KAAKX,KAAK,CAACY,WAAW;MACpB,IAAIC,QAAQ,GAAG,CAAC,GAAGR,KAAK,CAAC;MACzBQ,QAAQ,CAACP,MAAM,CAACK,GAAG,CAAC,CAACR,WAAW,GAAG,CAACU,QAAQ,CAACP,MAAM,CAACK,GAAG,CAAC,CAACR,WAAW;MACpE,OAAOU,QAAQ;IACjB,KAAKb,KAAK,CAACc,SAAS;MAClB,IAAIC,SAAS,GAAG,CAAC,GAAGV,KAAK,CAAC;MAC1BU,SAAS,CAACT,MAAM,CAACK,GAAG,CAAC,GAAG;QACtBT,QAAQ,EAAEI,MAAM,CAACJ,QAAQ;QACzB,GAAGa,SAAS,CAACT,MAAM,CAACK,GAAG;MACzB,CAAC;MACD,OAAOI,SAAS;IAClB;MACE,OAAOV,KAAK;EAAC;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}